import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, Req, Put, ParseIntPipe, Query } from '@nestjs/common';
import { ManutencoesService } from './manutencoes.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

interface RequestWithUser extends Request {
  user: {
    userId: number;
    email: string;
    role: string;
  };
}

@Controller('api/manutencoes')
@UseGuards(JwtAuthGuard)
export class ManutencoesController {
  constructor(private readonly manutencoesService: ManutencoesService) {}

  // ‚≠ê CRIAR NOVA MANUTEN√á√ÉO
  @Post()
  async create(@Body() createManutencaoDto: any, @Req() req: RequestWithUser) {
    console.log('üì• [Controller] Criando nova manuten√ß√£o:', createManutencaoDto);
    return this.manutencoesService.create(createManutencaoDto, req.user.userId);
  }

  // ‚≠ê BUSCAR TODAS - CORRIGIDO
  @Get()
  async findAll(@Req() req: RequestWithUser) {
    console.log('üîç [Controller] Buscando todas as manuten√ß√µes');
    return this.manutencoesService.findAll(req.user.userId, req.user.role);
  }

  // ‚≠ê BUSCAR POR ID - CORRIGIDO
  @Get(':id')
  async findOne(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {
    console.log(`üîç [Controller] Buscando manuten√ß√£o ${id}`);
    return this.manutencoesService.findOne(id, req.user.userId, req.user.role);
  }

  // ‚≠ê ATUALIZAR - CORRIGIDO
  @Put(':id')
  async update(
    @Param('id', ParseIntPipe) id: number, 
    @Body() updateManutencaoDto: any, 
    @Req() req: RequestWithUser
  ) {
    console.log(`üîÑ [Controller] Atualizando manuten√ß√£o ${id}:`, updateManutencaoDto);
    return this.manutencoesService.update(id, updateManutencaoDto, req.user.userId, req.user.role);
  }

  // ‚≠ê REMOVER - CORRIGIDO
  @Delete(':id')
  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {
    console.log(`üóëÔ∏è [Controller] Removendo manuten√ß√£o ${id}`);
    return this.manutencoesService.remove(id, req.user.userId, req.user.role);
  }

  // ‚≠ê ATUALIZAR STATUS
  @Patch(':id/status')
  async updateStatus(
    @Param('id', ParseIntPipe) id: number,
    @Body('status') status: string,
    @Req() req: RequestWithUser
  ) {
    console.log(`üîÑ [Controller] Atualizando status da manuten√ß√£o ${id} para ${status}`);
    return this.manutencoesService.updateStatus(id, status, req.user.userId, req.user.role);
  }

  // ‚≠ê ARQUIVAR - CORRIGIDO NOME DO M√âTODO
  @Patch(':id/arquivar')
  async arquivar(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {
    console.log(`üì¶ [Controller] Arquivando manuten√ß√£o ${id}`);
    return this.manutencoesService.arquivar(id, req.user.userId, req.user.role);
  }

  // ‚≠ê BUSCAR POR EQUIPAMENTO
  @Get('equipamento/:equipamentoId')
  async findByEquipamento(
    @Param('equipamentoId', ParseIntPipe) equipamentoId: number,
    @Query('includeArchived') includeArchived?: string
  ) {
    console.log(`üîç [Controller] Buscando manuten√ß√µes do equipamento ${equipamentoId}`);
    const includeArchivedBool = includeArchived === 'true';
    return this.manutencoesService.findByEquipamento(equipamentoId, includeArchivedBool);
  }

  // ‚≠ê BUSCAR HIST√ìRICO
  @Get('historico/all')
  async findHistorico(@Req() req: RequestWithUser) {
    console.log('üìö [Controller] Buscando hist√≥rico de manuten√ß√µes');
    return this.manutencoesService.findHistorico(req.user.userId, req.user.role);
  }

  // ‚≠ê ADICIONAR T√âCNICO
  @Post(':id/tecnicos')
  async adicionarTecnico(
    @Param('id', ParseIntPipe) id: number,
    @Body() dadosTecnico: any,
    @Req() req: RequestWithUser
  ) {
    console.log('‚ûï [Controller] Adicionando t√©cnico √† manuten√ß√£o:', id, dadosTecnico);
    return this.manutencoesService.adicionarTecnico(id, dadosTecnico, req.user.userId);
  }

  // ‚≠ê BUSCAR HIST√ìRICO DE T√âCNICOS
  @Get(':id/historico-tecnicos')
  async getHistoricoTecnicos(
    @Param('id', ParseIntPipe) id: number,
    @Req() req: RequestWithUser
  ) {
    console.log('üìã [Controller] Buscando hist√≥rico de t√©cnicos para manuten√ß√£o:', id);
    return this.manutencoesService.findHistoricoTecnicos(id, req.user.userId);
  }
}